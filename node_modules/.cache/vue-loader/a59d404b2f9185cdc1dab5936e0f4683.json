{"remainingRequest":"/home/frankcf/vmediaVuejsAndVuetify/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/frankcf/vmediaVuejsAndVuetify/node_modules/vuetify-loader/lib/loader.js??ref--18-0!/home/frankcf/vmediaVuejsAndVuetify/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/frankcf/vmediaVuejsAndVuetify/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/frankcf/vmediaVuejsAndVuetify/src/components/HelloWorld.vue?vue&type=template&id=469af010&scoped=true&","dependencies":[{"path":"/home/frankcf/vmediaVuejsAndVuetify/src/components/HelloWorld.vue","mtime":1586136820620},{"path":"/home/frankcf/vmediaVuejsAndVuetify/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/frankcf/vmediaVuejsAndVuetify/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/frankcf/vmediaVuejsAndVuetify/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/home/frankcf/vmediaVuejsAndVuetify/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/frankcf/vmediaVuejsAndVuetify/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}